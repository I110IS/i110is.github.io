#!/usr/bin/env ruby

require "erb"
require "fileutils"
require "set"
require "yaml"
require_relative "lib/frontmatter"
require_relative "lib/deep_transform_keys"

# Read config
config = File.read("config.yml")
config = YAML.load(config).deep_transform_keys(&:to_sym)

# Create dist folder
dist_path = config.fetch("dist_path", "dist")
FileUtils.mkdir(dist_path) unless Dir.exist?(dist_path)
FileUtils.rm_r(Dir.glob("#{dist_path}/**/*.{html,css,js,woff,ttf,eot}"))

# Defaults
variable_defaults = {
  node_modules: File.join(Dir.getwd, "node_modules"),
  separator: '^\n==\n',
  separator_vertical: '^\n--\n',
  theme: config[:theme]
}

template = File.read("template.html.erb")
js_template = File.read("template.js.erb")

# Collect all md files to build
paths = config[:paths].map do |path_object|
  path_object.merge({
    files: Dir["#{path_object[:path]}/**/*.md"]
  })
end

# Collect all used themes
themes = Set.new

# Add default variables and front matter config to each file
# Same structure as in config.yml plus a +files+ key.
#   files:
#     path_to_file: { config_1: true, config_2: 'something else' }
#     another_path: { config_1: false, config_2: 'something' }
paths = paths.map do |path_object|
  path_object[:files] = path_object[:files].to_h do |file|
    frontmatter = Frontmatter.new(file)
    variables = variable_defaults.merge(frontmatter.config)
    variables[:theme] = path_object[:theme] if path_object[:theme] && frontmatter.config[:theme].nil?
    variables[:path] = "/#{file}"
    themes.add(variables[:theme])

    [
      file,
      variables
    ]
  end

  path_object
end

# Create JS files
erb = ERB.new(js_template)

themes.each do |theme|
  next if theme.nil?
  puts "> Creating #{theme} JS file"
  variables = variable_defaults.merge({theme: theme})
  content = erb.result_with_hash(variables)
  File.open("#{dist_path}/#{theme}.js", "w") { |file| file.write(content) }
  system("npx esbuild --bundle "\
         "#{dist_path}/#{theme}.js "\
         "--bundle "\
         "--outfile=#{dist_path}/#{theme}.js "\
         "--allow-overwrite "\
         "--loader:.html=text "\
         "--loader:.woff=file "\
         "--loader:.eot=file "\
         "--loader:.ttf=file")
end

paths.each do |data_path|
  path = data_path[:path]
  puts "\n\n> Create #{path}"
  FileUtils.mkdir_p("#{dist_path}/#{path}")

  data_path[:files].each do |file, config|
    if config.fetch(:published, false)
      puts "\t> #{file}"
      erb = ERB.new(template)
      content = erb.result_with_hash(config)
      File.open("#{dist_path}/#{path}/#{File.basename(file, ".md")}.html", "w") do |f|
        f.write(content)
      end
      FileUtils.copy(file, "#{dist_path}/#{file}")
      Frontmatter.new("#{dist_path}/#{file}").delete
    else
      puts "\t> #{file} (skipped)"
    end
  end
end
